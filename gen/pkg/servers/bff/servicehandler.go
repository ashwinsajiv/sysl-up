// Code generated by sysl DO NOT EDIT.
package bff

import (
	"context"
	"fmt"
	"net/http"

	"github.com/anz-bank/sysl-go/common"
	"github.com/anz-bank/sysl-go/config"
	"github.com/anz-bank/sysl-go/core"
	"github.com/anz-bank/sysl-go/core/authrules"
	"github.com/anz-bank/sysl-go/restlib"
	"github.com/anz-bank/sysl-go/validator"

	"github.com/ashwinsajiv/sysl-up/gen/pkg/servers/bff/up"
)

// *InternalServerError error
var InternalServerError common.CustomError = map[string]string{
	"name":         "InternalServerError",
	"http_code":    "9998",
	"http_message": "Internal server error",
	"http_status":  "500",
}

// Handler interface for Bff
type Handler interface {
	GetV1AccountsListHandler(w http.ResponseWriter, r *http.Request)
}

// ServiceHandler for Bff API
type ServiceHandler struct {
	genCallback        core.RestGenCallback
	serviceInterface   *ServiceInterface
	authorizationRules map[string]authrules.Rule
	upService          up.Service
}

// NewServiceHandler for Bff
func NewServiceHandler(
	ctx context.Context,
	cfg *config.DefaultConfig,
	hooks *core.Hooks,
	genCallback core.RestGenCallback,
	serviceInterface *ServiceInterface,
	upUpService up.Service,
) (*ServiceHandler, error) {

	authorizationRules := make(map[string]authrules.Rule)

	return &ServiceHandler{
		genCallback,
		serviceInterface,
		authorizationRules,
		upUpService,
	}, nil
}

// GetV1AccountsListHandler ...
func (s *ServiceHandler) GetV1AccountsListHandler(w http.ResponseWriter, r *http.Request) {
	if s.serviceInterface.GetV1AccountsList == nil {
		common.HandleError(r.Context(), w, common.InternalError, "not implemented", nil, s.genCallback.MapError)
		return
	}

	ctx := common.RequestHeaderToContext(r.Context(), r.Header)
	ctx = common.RespHeaderAndStatusToContext(ctx, make(http.Header), http.StatusOK)
	var req GetV1AccountsListRequest

	ctx, cancel := s.genCallback.DownstreamTimeoutContext(ctx)
	defer cancel()
	valErr := validator.Validate(&req)
	if valErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", valErr, s.genCallback.MapError)
		return
	}

	client := GetV1AccountsListClient{
		UpGetAccountsList: s.upService.GetAccountsList,
	}

	defer func() {
		if rec := recover(); rec != nil {
			var err error
			switch rec := rec.(type) {
			case error:
				err = rec
			default:
				err = fmt.Errorf("Unknown error: %v", rec)
			}
			common.HandleError(ctx, w, common.InternalError, "Unexpected panic", err, s.genCallback.MapError)
		}
	}()
	getaccountresponse, err := s.serviceInterface.GetV1AccountsList(ctx, &req, client)
	if err != nil {
		common.HandleError(ctx, w, common.InternalError, "Handler error", err, s.genCallback.MapError)
		return
	}

	headermap, httpstatus := common.RespHeaderAndStatusFromContext(ctx)
	if headermap.Get("Content-Type") == "" {
		headermap.Set("Content-Type", "application/json")
	}
	restlib.SetHeaders(w, headermap)
	restlib.SendHTTPResponse(w, httpstatus, getaccountresponse)
}
